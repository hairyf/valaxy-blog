import{_ as p}from"./ValaxyMain.vue_vue_type_script_setup_true_lang-_PHymMwZ.js";import{b as f,e as b,w as i,f as g,a as k,p as s,g as l,i as G,h as n,r as o}from"./app-C5E7XBok.js";const P={__name:"index",setup(v,{expose:d}){const r=JSON.parse('{"title":"Git 分布式版本控制系统","description":"","frontmatter":{"title":"Git 分布式版本控制系统","categories":["Notes","Git"],"tags":["Git"],"date":"2019-10-06 16:00:00"},"headers":[{"level":2,"title":"为什么要使用版本控制","slug":"为什么要使用版本控制","link":"#为什么要使用版本控制","children":[]},{"level":2,"title":"集中化版本控制","slug":"集中化版本控制","link":"#集中化版本控制","children":[]},{"level":2,"title":"分布式版本控制","slug":"分布式版本控制","link":"#分布式版本控制","children":[]},{"level":2,"title":"Git 分布式版本控制","slug":"git-分布式版本控制","link":"#git-分布式版本控制","children":[]},{"level":2,"title":"Git 的三个概念","slug":"git-的三个概念","link":"#git-的三个概念","children":[]},{"level":2,"title":"Git 特点","slug":"git-特点","link":"#git-特点","children":[]},{"level":2,"title":"工作流程","slug":"工作流程","link":"#工作流程","children":[]},{"level":2,"title":"分支的本质","slug":"分支的本质","link":"#分支的本质","children":[]},{"level":2,"title":"远程协作","slug":"远程协作","link":"#远程协作","children":[]}],"relativePath":"pages/posts/notes/git/index.md","path":"/home/runner/work/valaxy-blog/valaxy-blog/pages/posts/notes/git/index.md","lastUpdated":1725453888000}'),a=k(),u=r.frontmatter||{};return a.meta.frontmatter=Object.assign(a.meta.frontmatter||{},r.frontmatter||{}),s("pageData",r),s("valaxy:frontmatter",u),globalThis.$frontmatter=u,d({frontmatter:{title:"Git 分布式版本控制系统",categories:["Notes","Git"],tags:["Git"],date:"2019-10-06 16:00:00"}}),(e,t)=>{const m=p;return f(),b(m,{frontmatter:g(u)},{"main-content-md":i(()=>[t[0]||(t[0]=l("p",null,"版本控制最主要的功能就是追踪文件的变更。它将什么时候、什么人更改了文件的什么内容等信息忠实地了记录下来。每一次文件的改变，文件的版本号都将增加。除了记录版本变更外，版本控制的另一个重要功能是并行开发。软件开发往往是多人协同作业，版本控制可以有效地解决版本的同步以及不同开发者之间的开发通信问题，提高协同开发的效率。并行开发中最常见的不同版本软件的错误(Bug)修正问题也可以通过版本控制中分支与合并的方法有效地解决。",-1)),G(" more "),t[1]||(t[1]=l("h2",{id:"为什么要使用版本控制",tabindex:"-1"},[n("为什么要使用版本控制 "),l("a",{class:"header-anchor",href:"#为什么要使用版本控制","aria-label":'Permalink to "为什么要使用版本控制"'},"​")],-1)),t[2]||(t[2]=l("p",null,"软件开发中采用版本控制系统是个明智的选择。 有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某 个时间点的状态。就算你乱来一气把整个项目中的文件改的改删的删，你也照样可以 轻松恢复到原先的样子。但额外增加的工作量却微乎其微。 你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异 问题出现的原因，又是谁在何时报告了某个功能缺陷等等。",-1)),t[3]||(t[3]=l("h2",{id:"集中化版本控制",tabindex:"-1"},[n("集中化版本控制 "),l("a",{class:"header-anchor",href:"#集中化版本控制","aria-label":'Permalink to "集中化版本控制"'},"​")],-1)),t[4]||(t[4]=l("p",null,"优点：每个人都可以在一定程度上看到项目中的其 他人正在做些什么。而管理员也可以轻松掌控每个开发者的权限，并且管理一个集 中化的版本控制系统; 要远比在各个客户端上维护本地数据库来得轻松容易。",-1)),t[5]||(t[5]=l("p",null,"缺点：故障时无法协同工作、写代码时不能参考版本代码和对代码进行优化。中央服务器有丢失数据的风险，",-1)),t[6]||(t[6]=l("h2",{id:"分布式版本控制",tabindex:"-1"},[n("分布式版本控制 "),l("a",{class:"header-anchor",href:"#分布式版本控制","aria-label":'Permalink to "分布式版本控制"'},"​")],-1)),t[7]||(t[7]=l("p",null,"客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来。",-1)),t[8]||(t[8]=l("blockquote",null,[l("p",null,"这么一来，任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本 地仓库恢复。因为每一次的提取操作，实际上都是一次对代码仓库的完整备份")],-1)),t[9]||(t[9]=l("p",null,"分布式的版本控制系统在管理项目时 存放的不是项目版本与版本之间 的差异.它存的是索引",-1)),t[10]||(t[10]=l("blockquote",null,[l("p",null,"所需磁盘空间很少 所以每个客户端都可以放下整个 项目的历史记录")],-1)),t[11]||(t[11]=l("p",null,"分布式的版本控制系统出现之后,解决了集中式版本控制系统的缺陷",-1)),t[12]||(t[12]=l("blockquote",null,[l("ol",null,[l("li",null,"断网的情况下也可以进行开发(因为版本控制是在本地进行的)"),l("li",null,[n("使用 "),l("code",null,"github"),n(" 进行团队协作,哪怕 "),l("code",null,"github"),n(" 挂了 每个客户端保存 的也都是整个完整的项目(包含历史记录的!!!)")])])],-1)),t[13]||(t[13]=l("h2",{id:"git-分布式版本控制",tabindex:"-1"},[n("Git 分布式版本控制 "),l("a",{class:"header-anchor",href:"#git-分布式版本控制","aria-label":'Permalink to "Git 分布式版本控制"'},"​")],-1)),t[14]||(t[14]=l("p",null,[n("Git 是目前世界上最先进的分布式版本控制系统。同生活中的许多伟大事件一样，Git 诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众广的参与者。绝 大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002 年间）。到 2002 年，整个项目组开始启用分布式版本控制系统 "),l("code",null,"BitKeeper"),n(" 来管理和维 护代码。")],-1)),t[15]||(t[15]=l("p",null,[n("到了 2005 年，开发 "),l("code",null,"BitKeeper"),n(" 的商业公司同 Linux 内核开源社区的合作关系结 束，他们收回了免费使用 "),l("code",null,"BitKeeper"),n(" 的权力。这就迫使 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds ）不得不吸取教训，只有开发一套属于自己的版本控制系统才 不至于重蹈覆辙。他们对新的系统制订了若干目标：")],-1)),t[16]||(t[16]=l("pre",null,[l("code",null,`分支切换速度快，容量小(压缩)，简单的设计，完全分布式 

对非线性开发模式的强力支持（允许上千个并行开发的分支） 

有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）
`)],-1)),t[17]||(t[17]=l("p",null,"自诞生于 2005 年以来，Git 日臻成熟完善，在高度易用的同时，仍然保留着初期设 定的目标。它的速度飞快，极其适合管理大项目，它还有着令人难以置信的非线性分支管理 系统可以应付各种复杂的项目开发需求。",-1)),t[18]||(t[18]=l("h2",{id:"git-的三个概念",tabindex:"-1"},[n("Git 的三个概念 "),l("a",{class:"header-anchor",href:"#git-的三个概念","aria-label":'Permalink to "Git 的三个概念"'},"​")],-1)),t[19]||(t[19]=l("ul",null,[l("li",null,"工作区、暂存区、版本库"),l("li",null,"Git对象、树对象、提交对象"),l("li",null,"本地分支、远程跟踪分支、远程分支")],-1)),t[20]||(t[20]=l("h2",{id:"git-特点",tabindex:"-1"},[n("Git 特点 "),l("a",{class:"header-anchor",href:"#git-特点","aria-label":'Permalink to "Git 特点"'},"​")],-1)),t[21]||(t[21]=l("ul",null,[l("li",null,[l("p",null,"直接记录快照并非差异比较"),l("blockquote",null,[l("p",null,"Git 和其它版本控制系统（包括 Subversion 和近似工具）的主要差别在于 Git 对待数据的方法。")])]),l("li",null,[l("p",null,"近乎所有操作都是本地执行"),l("blockquote",null,[l("p",null,"在 Git 中的绝大多数操作都只需要访问本地文件和资源，一般不需要来自网络上其它计算机的信息。")])]),l("li",null,[l("p",null,"保证完整性"),l("blockquote",null,[l("p",null,"Git 中所有数据在存储前都计算校验和，然后以校验和来引用。 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。")])]),l("li",null,[l("p",null,"一般只添加数据"),l("blockquote",null,[l("p",null,"执行的 Git 操作，几乎只往 Git 数据库中增加数据。")])]),l("li",null,[l("p",null,"三种状态"),l("blockquote",null,[l("p",null,"已提交（committed）、已修改（modified）和已暂存（staged）")])])],-1)),t[22]||(t[22]=l("h2",{id:"工作流程",tabindex:"-1"},[n("工作流程 "),l("a",{class:"header-anchor",href:"#工作流程","aria-label":'Permalink to "工作流程"'},"​")],-1)),t[23]||(t[23]=l("p",null,"每个项目都有一个 Git 目录（.git ）它是 Git 用来保存元数据和对象数据库 的地方。",-1)),t[24]||(t[24]=l("ol",null,[l("li",null,[l("p",null,"在工作目录中修改某些文件。"),l("blockquote",null,[l("p",null,"从项目中取出某个版本的所有文件和目录，用以开始后续工作的叫做工作 目录。这些文件实际上都是从 Git 目录中的压缩对象数据库中提取出来 的，接下来就可以在工作目录中对这些文件进行编辑。")])]),l("li",null,[l("p",null,"保存到暂存区域，对暂存区做快照"),l("blockquote",null,[l("p",null,"暂存区域只不过是个简单的文件，一般都放在 Git 目录中。有时候人们 会把这个文件叫做索引文件，不过标准说法还是叫暂存区域。")])]),l("li",null,[l("p",null,"提交更新"),l("blockquote",null,[l("p",null,"将保存在暂存区域的文件快照永久转储到本地数据库（Git 目录） 中"),l("p",null,"我们可以从文件所处的位置来判断状态：如果是 Git 目录中保存着的特定版 本文件，就属于已提交状态；如果作了修改并已放入暂存区域，就属于已暂存 状态；如果自上次取出后，作了修改但还没有放到暂存区域，就是已修改状态。")])])],-1)),t[25]||(t[25]=l("h2",{id:"分支的本质",tabindex:"-1"},[n("分支的本质 "),l("a",{class:"header-anchor",href:"#分支的本质","aria-label":'Permalink to "分支的本质"'},"​")],-1)),t[26]||(t[26]=l("p",null,"分支的本质就是一个提交对象，所有的分支都会有机会被HEAD所引用。当我们有新的提交的时候，HEAD会携带当前持有的分支往前移动",-1)),t[27]||(t[27]=l("h2",{id:"远程协作",tabindex:"-1"},[n("远程协作 "),l("a",{class:"header-anchor",href:"#远程协作","aria-label":'Permalink to "远程协作"'},"​")],-1)),t[28]||(t[28]=l("p",null,"三大概念",-1)),t[29]||(t[29]=l("blockquote",null,[l("p",null,"本地分支、远程跟踪分支(remote/分支名)、远程分支")],-1)),t[30]||(t[30]=l("p",null,"基本流程",-1)),t[31]||(t[31]=l("ul",null,[l("li",null,"第一步: 项目经理创建一个空的远程仓库"),l("li",null,"第三步: 为远程仓库配别名 配完用户名 邮箱"),l("li",null,"第四步: 在本地仓库中初始化代码 提交代码"),l("li",null,"第五步: 推送"),l("li",null,"第六步: 邀请成员"),l("li",null,"第七步: 成员克隆远程仓库"),l("li",null,"第八步: 成员做出修改"),l("li",null,"第九步: 成员推送自己的修改"),l("li",null,"第十步: 项目经理拉取成员的修改")],-1)),t[32]||(t[32]=l("p",null,"克隆仓库时 会自动为 master 做跟踪",-1))]),"main-header":i(()=>[o(e.$slots,"main-header")]),"main-header-after":i(()=>[o(e.$slots,"main-header-after")]),"main-nav":i(()=>[o(e.$slots,"main-nav")]),"main-content":i(()=>[o(e.$slots,"main-content")]),"main-content-after":i(()=>[o(e.$slots,"main-content-after")]),"main-nav-before":i(()=>[o(e.$slots,"main-nav-before")]),"main-nav-after":i(()=>[o(e.$slots,"main-nav-after")]),comment:i(()=>[o(e.$slots,"comment")]),footer:i(()=>[o(e.$slots,"footer")]),aside:i(()=>[o(e.$slots,"aside")]),"aside-custom":i(()=>[o(e.$slots,"aside-custom")]),default:i(()=>[o(e.$slots,"default")]),_:3},8,["frontmatter"])}}};export{P as default};
