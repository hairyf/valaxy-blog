import{_ as o}from"./ValaxyMain.vue_vue_type_script_setup_true_lang-_PHymMwZ.js";import{b as p,e as m,w as l,f as D,a as u,p as r,g as i,h as t,i as B,r as e}from"./app-C5E7XBok.js";const f={__name:"advanced",setup(y,{expose:d}){const n=JSON.parse('{"title":"Git 高级概念应用(CRUD)","description":"","frontmatter":{"title":"Git 高级概念应用(CRUD)","date":"2019-10-07 14:00:00","categories":["Notes","Git"],"tags":["Git"]},"headers":[{"level":2,"title":"初始化仓库:git init（初始化）","slug":"初始化仓库-git-init-初始化","link":"#初始化仓库-git-init-初始化","children":[]},{"level":2,"title":"检查当前文件状态：git status","slug":"检查当前文件状态-git-status","link":"#检查当前文件状态-git-status","children":[]},{"level":2,"title":"跟踪新文件:git add（暂存）","slug":"跟踪新文件-git-add-暂存","link":"#跟踪新文件-git-add-暂存","children":[{"level":3,"title":"查看哪些更新还没有暂存","slug":"查看哪些更新还没有暂存","link":"#查看哪些更新还没有暂存","children":[]},{"level":3,"title":"查看哪些更新已暂存准备下次提交","slug":"查看哪些更新已暂存准备下次提交","link":"#查看哪些更新已暂存准备下次提交","children":[]}]},{"level":2,"title":"提交更新:git commit（提交）","slug":"提交更新-git-commit-提交","link":"#提交更新-git-commit-提交","children":[{"level":3,"title":"跳过使用暂存区域","slug":"跳过使用暂存区域","link":"#跳过使用暂存区域","children":[]}]},{"level":2,"title":"移除文件: git rm 文件名（删除）","slug":"移除文件-git-rm-文件名-删除","link":"#移除文件-git-rm-文件名-删除","children":[]},{"level":2,"title":"文件改名:git mv 文件名（改名）","slug":"文件改名-git-mv-文件名-改名","link":"#文件改名-git-mv-文件名-改名","children":[]},{"level":2,"title":"查看历史记录: git log（提交）","slug":"查看历史记录-git-log-提交","link":"#查看历史记录-git-log-提交","children":[]}],"relativePath":"pages/posts/notes/git/advanced.md","path":"/home/runner/work/valaxy-blog/valaxy-blog/pages/posts/notes/git/advanced.md","lastUpdated":1725453888000}'),h=u(),k=n.frontmatter||{};return h.meta.frontmatter=Object.assign(h.meta.frontmatter||{},n.frontmatter||{}),r("pageData",n),r("valaxy:frontmatter",k),globalThis.$frontmatter=k,d({frontmatter:{title:"Git 高级概念应用(CRUD)",date:"2019-10-07 14:00:00",categories:["Notes","Git"],tags:["Git"]}}),(a,s)=>{const g=o;return p(),m(g,{frontmatter:D(k)},{"main-content-md":l(()=>[s[0]||(s[0]=i("h2",{id:"初始化仓库-git-init-初始化",tabindex:"-1"},[t("初始化仓库:"),i("code",null,"git init"),t("（初始化） "),i("a",{class:"header-anchor",href:"#初始化仓库-git-init-初始化","aria-label":'Permalink to "初始化仓库:`git init`（初始化）"'},"​")],-1)),s[1]||(s[1]=i("p",null,[i("strong",null,"作用"),t("：初始化后，在当前目录下会出现一个名为 .git 的目录，所有 Git 需要 的数据和资源都存放在这个目录中。不过目前，仅仅是按照既有的结构框架初始化 好了里边所有的文件和目录，但我们还没有开始跟踪管理项目中的任何一个文件。")],-1)),s[2]||(s[2]=i("p",null,[t("工作目录下面的所有文件都不外乎这两种状态**："),i("strong",null,"已跟踪"),t(" 或 "),i("strong",null,"未跟踪"),t("。")],-1)),s[3]||(s[3]=i("p",null,[t("已跟踪的文件是指本来就被纳入版本控制管理的文件，在上次快照中有它 们的记录，工作一段时间后，它们的状态可能是"),i("strong",null,"已提交"),t("，"),i("strong",null,"已修改"),t("或者"),i("strong",null,"已暂存"),t("。")],-1)),s[4]||(s[4]=i("p",null,"所有其他文件都属于未跟踪文件。它们既没有上次更新时的快照，也不在 当前的暂存区域。",-1)),s[5]||(s[5]=i("p",null,"初次克隆某个仓库时，工作目录中的所有文件都属于已跟踪文件，且状态 为已提交；在编辑过某些文件之后，Git 将这些文件标为已修改。我们逐步把 这些修改过的文件放到暂存区域，直到最后一次性提交所有这些暂存起来的文 件。使用 Git 时的文件状态变化周期如下图所示",-1)),B(" more "),s[6]||(s[6]=i("h2",{id:"检查当前文件状态-git-status",tabindex:"-1"},[t("检查当前文件状态："),i("code",null,"git status"),t(),i("a",{class:"header-anchor",href:"#检查当前文件状态-git-status","aria-label":'Permalink to "检查当前文件状态：`git status`"'},"​")],-1)),s[7]||(s[7]=i("p",null,"确定文件当前处于什么状态",-1)),s[8]||(s[8]=i("p",null,[i("strong",null,"如果创建一个新文件 README,保存退出后运行 git status 会看到该文件出现 在未跟踪文件列表中"),t("：")],-1)),s[9]||(s[9]=i("div",{class:"language-sh vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"sh"),i("pre",{class:"shiki shiki-themes material-theme-darker material-theme-lighter vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}},"On"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," branch"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," master")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}},"Untracked"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," files:")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}}," ("),i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}},"use"),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},' "'),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}},"git add <file>..."),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},'"'),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," to"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," include"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," in"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," what"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," will"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," be"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," committed"),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},")")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}}," README")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}},"nothing"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," added"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," to"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," commit"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," but"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," untracked"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," files"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," present"),i("span",{style:{"--shiki-dark":"#EEFFFF","--shiki-light":"#90A4AE"}}," (use "),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},'"'),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}},"git add"),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},'"'),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," to")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}},"track"),i("span",{style:{"--shiki-dark":"#EEFFFF","--shiki-light":"#90A4AE"}},")")])])]),i("button",{class:"collapse"})],-1)),s[10]||(s[10]=i("h2",{id:"跟踪新文件-git-add-暂存",tabindex:"-1"},[t("跟踪新文件:"),i("code",null,"git add"),t("（暂存） "),i("a",{class:"header-anchor",href:"#跟踪新文件-git-add-暂存","aria-label":'Permalink to "跟踪新文件:`git add`（暂存）"'},"​")],-1)),s[11]||(s[11]=i("p",null,[i("strong",null,"作用"),t("：跟踪一个新文件")],-1)),s[12]||(s[12]=i("p",null,[i("strong",null,"当运行此命令在运行 git status 命令，会看到 README 文件已被跟踪，并处于暂存 状态"),t("：")],-1)),s[13]||(s[13]=i("div",{class:"language-sh vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"sh"),i("pre",{class:"shiki shiki-themes material-theme-darker material-theme-lighter vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}},"Changes"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," to"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," be"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," committed:")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}}," ("),i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}},"use"),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},' "'),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}},"git reset HEAD <file>..."),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},'"'),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," to"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," unstage"),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},")")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}}," new"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," file:"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," README")])])]),i("button",{class:"collapse"})],-1)),s[14]||(s[14]=i("p",null,"只要在 “Changes to be committed” 这行下面的，就说明是已暂存状态。",-1)),s[15]||(s[15]=i("p",null,[t("如果此时提交，那么该文件此时此刻的版本将被留存在历史记录中。在 git add 后面可以指明要跟踪的"),i("strong",null,"文件"),t("或"),i("strong",null,"目录路径"),t("。如果是目录的话，就说明要递归 跟踪该目录下的所有文件。")],-1)),s[16]||(s[16]=i("blockquote",null,[i("p",null,"其实 git add 的潜台词就是把目标文件快 照放入暂存区域，也就是 add file into staged area，同时未曾跟踪过的文件标 记为已跟踪。")],-1)),s[17]||(s[17]=i("p",null,"现在 README 文件都已暂存，下次提交时就会一并记录到仓库。假设此时， 你想要在 README 里再加条注释，重新编辑存盘后，准备好提交。不过且慢，再 运行 git status 看看：",-1)),s[18]||(s[18]=i("div",{class:"language-sh vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"sh"),i("pre",{class:"shiki shiki-themes material-theme-darker material-theme-lighter vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}},"On"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," branch"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," master")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}},"Changes"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," to"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," be"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," committed:")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}}," ("),i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}},"use"),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},' "'),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}},"git reset HEAD <file>..."),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},'"'),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," to"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," unstage"),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},")")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}}," new"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," file:"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," README")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}},"Changes"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," not"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," staged"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," for"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," commit:")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}}," ("),i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}},"use"),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},' "'),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}},"git add <file>..."),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},'"'),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," to"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," update"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," what"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," will"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," be"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," committed"),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},")")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}}," ("),i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}},"use"),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},' "'),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}},"git checkout -- <file>..."),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},'"'),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," to"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," discard"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," changes"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," in"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," working"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," directory"),i("span",{style:{"--shiki-dark":"#89DDFF","--shiki-light":"#39ADB5"}},")")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}}," modified:"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," README")])])]),i("button",{class:"collapse"})],-1)),s[19]||(s[19]=i("p",null,[t("README 文件出现了两次！一次算已修改，一次算已暂存，这怎么可能呢？ 好吧，实际上 Git 只不过暂存了你运行 git add 命令时的版本，如果现在提交，那 么提交的是添加注释前的版本，而非当前工作目录中的版本。所以，"),i("strong",null,"运行了 git add 之后又作了修订的文件，需要重新运行 git add 把最新版本重新暂存起来")],-1)),s[20]||(s[20]=i("div",{class:"language-sh vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"sh"),i("pre",{class:"shiki shiki-themes material-theme-darker material-theme-lighter vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}},"$"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," git"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," add"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," README")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-dark":"#FFCB6B","--shiki-light":"#E2931D"}},"$"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," git"),i("span",{style:{"--shiki-dark":"#C3E88D","--shiki-light":"#91B859"}}," status")])])]),i("button",{class:"collapse"})],-1)),s[21]||(s[21]=i("p",null,"git diff 命令.这个命令它已经能解决我们 两个问题了：当前做的哪些更新还没有暂存？有哪些更新已经暂存起来准备 好了下次提交？",-1)),s[22]||(s[22]=i("h3",{id:"查看哪些更新还没有暂存",tabindex:"-1"},[t("查看哪些更新还没有暂存 "),i("a",{class:"header-anchor",href:"#查看哪些更新还没有暂存","aria-label":'Permalink to "查看哪些更新还没有暂存"'},"​")],-1)),s[23]||(s[23]=i("p",null,[t("命令："),i("code",null,"git diff（不加参数直接输入 git diff）")],-1)),s[24]||(s[24]=i("h3",{id:"查看哪些更新已暂存准备下次提交",tabindex:"-1"},[t("查看哪些更新已暂存准备下次提交 "),i("a",{class:"header-anchor",href:"#查看哪些更新已暂存准备下次提交","aria-label":'Permalink to "查看哪些更新已暂存准备下次提交"'},"​")],-1)),s[25]||(s[25]=i("p",null,[t("命令： "),i("code",null,"git diff –cached 或者 git diff –staged(1.6.1 以上)")],-1)),s[26]||(s[26]=i("h2",{id:"提交更新-git-commit-提交",tabindex:"-1"},[t("提交更新:"),i("code",null,"git commit"),t("（提交） "),i("a",{class:"header-anchor",href:"#提交更新-git-commit-提交","aria-label":'Permalink to "提交更新:`git commit`（提交）"'},"​")],-1)),s[27]||(s[27]=i("p",null,[t("当暂存区域已经准备妥当可以提交时，在此之前，请一定要确认还有什么修改 过的或新建的文件还没有 git add 过，否则提交的时候不会记录这些还没暂存起来 的变化。所以，每次准备提交前，先用 git status 看下，是不是都已暂存起来了， 然后再运行提交命令 "),i("code",null,"git commit")],-1)),s[28]||(s[28]=i("p",null,[i("code",null,"git commit"),t("会启动文本编辑器，以便输入本次提交的说明 默认的提交消息包含最后一次运行 git status 的输出，放在注释行里， 另外开头还有一空行，供你输入提交说明。你完全可以去掉这些注释行， 不过留着也没关系，多少能帮你回想起这次更新的内容有哪些。")],-1)),s[29]||(s[29]=i("p",null,[i("strong",null,"以用 -m 参数后跟提交说明的方式，在一行命令中提交更新"),t("："),i("code",null,"git commit –m “message xxx”")],-1)),s[30]||(s[30]=i("p",null,"提交时记录的是放在暂存区域的快照，任何还未暂存的仍然保持已修改状态， 可以在下次提交时纳入版本管理。每一次运行提交操作，都是对你项目作一次快照， 以后可以回到这个状态，或者进行比较",-1)),s[31]||(s[31]=i("h3",{id:"跳过使用暂存区域",tabindex:"-1"},[t("跳过使用暂存区域 "),i("a",{class:"header-anchor",href:"#跳过使用暂存区域","aria-label":'Permalink to "跳过使用暂存区域"'},"​")],-1)),s[32]||(s[32]=i("p",null,[t("尽管使用暂存区域的方式可以精心准备要提交的细节，但有时候这么做略显繁 琐。Git 提供了一个跳过使用暂存区域的方式，只要在提交的时候，给 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交， 从而"),i("strong",null,[t("跳过 git add 步骤 "),i("code",null,"git commit -a -m [注释]")])],-1)),s[33]||(s[33]=i("h2",{id:"移除文件-git-rm-文件名-删除",tabindex:"-1"},[t("移除文件: "),i("code",null,"git rm 文件名"),t("（删除） "),i("a",{class:"header-anchor",href:"#移除文件-git-rm-文件名-删除","aria-label":'Permalink to "移除文件: `git rm 文件名`（删除）"'},"​")],-1)),s[34]||(s[34]=i("p",null,[t("要从 Git 中移除某个文件，就必须要从已跟踪文件清单中注册删除（确切地说， 是在暂存区域注册删除），然后提交。可以用 "),i("strong",null,"git rm"),t(" 命令完成此项工作，并连带 从工作目录中删除指定的文件，这样以后就不会出现在未跟踪文件清单中了。")],-1)),s[35]||(s[35]=i("h2",{id:"文件改名-git-mv-文件名-改名",tabindex:"-1"},[t("文件改名:"),i("code",null,"git mv 文件名"),t("（改名） "),i("a",{class:"header-anchor",href:"#文件改名-git-mv-文件名-改名","aria-label":'Permalink to "文件改名:`git mv 文件名`（改名）"'},"​")],-1)),s[36]||(s[36]=i("p",null,[i("code",null,"git mv laoliu.txt laoliuliu.txt"),i("code",null,"git commit -a / git status")],-1)),s[37]||(s[37]=i("div",{class:"language- vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"}),i("pre",{class:"shiki shiki-themes material-theme-darker material-theme-lighter vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",null,"$ git status")]),t(`
`),i("span",{class:"line"},[i("span",null,"On branch master")]),t(`
`),i("span",{class:"line"},[i("span",null,"Changes to be committed:")]),t(`
`),i("span",{class:"line"},[i("span",null,'  (use "git restore --staged <file>..." to unstage)')]),t(`
`),i("span",{class:"line"},[i("span",null,"        renamed:    laoliu.txt -> laoliuliu.txt")])])]),i("button",{class:"collapse"})],-1)),s[38]||(s[38]=i("p",null,[i("strong",null,"其实，运行 git mv 就相当于运行了下面三条命令"),t("：")],-1)),s[39]||(s[39]=i("div",{class:"language- vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"}),i("pre",{class:"shiki shiki-themes material-theme-darker material-theme-lighter vp-code"},[i("code",{"v-pre":""},[i("span",{class:"line"},[i("span",null,"$ mv laoliu.txt laoliuliu.txt")]),t(`
`),i("span",{class:"line"},[i("span",null,"$ git rm laoliu.txt")]),t(`
`),i("span",{class:"line"},[i("span",null,"$ git add laoliuliu.txt")])])]),i("button",{class:"collapse"})],-1)),s[40]||(s[40]=i("h2",{id:"查看历史记录-git-log-提交",tabindex:"-1"},[t("查看历史记录: "),i("code",null,"git log"),t("（提交） "),i("a",{class:"header-anchor",href:"#查看历史记录-git-log-提交","aria-label":'Permalink to "查看历史记录: `git log`（提交）"'},"​")],-1)),s[41]||(s[41]=i("p",null,[t("在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。 完成这个任务最简单而又有效的工具是 "),i("code",null,"git log"),t(" 命令")],-1)),s[42]||(s[42]=i("p",null,[i("strong",null,"默认不用任何参数的话，git log 会按提交时间列出所有的更新"),t("，最近的 更新排在最上面。 正如你所看到的，这个命令会列出每个提交的 "),i("code",null,"SHA-1"),t(" 校验和、 作者的名字和电子邮件地址、提交时间以及提交说明。")],-1)),s[43]||(s[43]=i("p",null,[t("只显示一行："),i("code",null,"git log --pretty=oneline")],-1)),s[44]||(s[44]=i("p",null,[t("显示一行并截取hash值："),i("code",null,"git log --oneline")],-1))]),"main-header":l(()=>[e(a.$slots,"main-header")]),"main-header-after":l(()=>[e(a.$slots,"main-header-after")]),"main-nav":l(()=>[e(a.$slots,"main-nav")]),"main-content":l(()=>[e(a.$slots,"main-content")]),"main-content-after":l(()=>[e(a.$slots,"main-content-after")]),"main-nav-before":l(()=>[e(a.$slots,"main-nav-before")]),"main-nav-after":l(()=>[e(a.$slots,"main-nav-after")]),comment:l(()=>[e(a.$slots,"comment")]),footer:l(()=>[e(a.$slots,"footer")]),aside:l(()=>[e(a.$slots,"aside")]),"aside-custom":l(()=>[e(a.$slots,"aside-custom")]),default:l(()=>[e(a.$slots,"default")]),_:3},8,["frontmatter"])}}};export{f as default};
